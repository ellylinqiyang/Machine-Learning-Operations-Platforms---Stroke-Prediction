{
  "nbformat": 4,
  "nbformat_minor": 5,
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "microsoft": {
      "host": {
        "AzureML": {
          "notebookHasBeenCompleted": true
        }
      }
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    },
    "kernel_info": {
      "name": "python3"
    },
    "colab": {
      "name": "ZhizhuoLi_Stroke Prediction_logistic regression.ipynb",
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/zhizhuoli1/Machine-Learning-Operations-Platforms---Stroke-Prediction/blob/main/Azure%20-%20Stroke%20Prediction_ZhizhuoLi.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f6b22e4e"
      },
      "source": [
        "## 1. Set up with Azure Workspace"
      ],
      "id": "f6b22e4e"
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644723734
        },
        "id": "31e6873e-365d-468a-bc97-bb91e0577d7d"
      },
      "source": [
        "from azureml.core import Workspace\n",
        "ws = Workspace.from_config()"
      ],
      "id": "31e6873e-365d-468a-bc97-bb91e0577d7d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "gather": {
          "logged": 1635644727987
        },
        "id": "793de460",
        "outputId": "2ec5b0ca-a67f-446a-a4ac-3dc2694d0da1"
      },
      "source": [
        "# azureml-core of version 1.0.72 or higher is required\n",
        "# azureml-dataprep[pandas] of version 1.1.34 or higher is required\n",
        "from azureml.core import Dataset\n",
        "\n",
        "subscription_id = 'f82cd689-5e80-4623-84e9-a111e94c3380'\n",
        "resource_group = 'MLOPS'\n",
        "workspace_name = 'mlop_ws'\n",
        "\n",
        "workspace = Workspace(subscription_id, resource_group, workspace_name)\n",
        "\n",
        "dataset = Dataset.get_by_name(workspace, name='stroke_dirty25')\n",
        "dataset.to_pandas_dataframe()"
      ],
      "id": "793de460",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 2,
          "data": {
            "text/plain": "      Column1  index     id  gender   age  hypertension  heart_disease  \\\n0           0      0   9046    Male  67.0             0              1   \n1           1      1  51676  Female  61.0             0              0   \n2           2      2  31112    Male  80.0             0              1   \n3           3      3  60182  Female  49.0             0              0   \n4           4      4   1665  Female  79.0             1              0   \n...       ...    ...    ...     ...   ...           ...            ...   \n5405     5405    599  64174  Female  59.0             1              0   \n5406     5406   2068  16113  Female  47.0             0              0   \n5407     5407   2874  68970  Female  24.0             0              0   \n5408     5408   3736  70874    Male  71.0             1              0   \n5409     5409   1667  50841  Female  40.0             0              0   \n\n      ever_married      work_type Residence_type  avg_glucose_level   bmi  \\\n0             True        Private          Urban             228.69  36.6   \n1             True  Self-employed          Rural             202.21   NaN   \n2             True        Private          Rural             105.92  32.5   \n3             True        Private          Urban             171.23  34.4   \n4             True  Self-employed          Rural             174.12  24.0   \n...            ...            ...            ...                ...   ...   \n5405          True        Private          Urban             204.86  30.8   \n5406          True       Govt_job          Rural             100.41  23.8   \n5407         False        Private          Urban              85.07  22.5   \n5408          True       Govt_job          Urban             153.08  21.5   \n5409          True        Private          Rural             191.48  27.9   \n\n       smoking_status  stroke  \n0     formerly smoked       1  \n1        never smoked       1  \n2        never smoked       1  \n3              smokes       1  \n4        never smoked       1  \n...               ...     ...  \n5405     never smoked       0  \n5406     never smoked       0  \n5407          Unknown       0  \n5408          Unknown       0  \n5409           smokes       0  \n\n[5410 rows x 14 columns]",
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Column1</th>\n      <th>index</th>\n      <th>id</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>ever_married</th>\n      <th>work_type</th>\n      <th>Residence_type</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>smoking_status</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>9046</td>\n      <td>Male</td>\n      <td>67.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>True</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>228.69</td>\n      <td>36.6</td>\n      <td>formerly smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>51676</td>\n      <td>Female</td>\n      <td>61.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>True</td>\n      <td>Self-employed</td>\n      <td>Rural</td>\n      <td>202.21</td>\n      <td>NaN</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>2</td>\n      <td>31112</td>\n      <td>Male</td>\n      <td>80.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>True</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>105.92</td>\n      <td>32.5</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>3</td>\n      <td>60182</td>\n      <td>Female</td>\n      <td>49.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>True</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>171.23</td>\n      <td>34.4</td>\n      <td>smokes</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>4</td>\n      <td>1665</td>\n      <td>Female</td>\n      <td>79.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>True</td>\n      <td>Self-employed</td>\n      <td>Rural</td>\n      <td>174.12</td>\n      <td>24.0</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>5405</th>\n      <td>5405</td>\n      <td>599</td>\n      <td>64174</td>\n      <td>Female</td>\n      <td>59.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>True</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>204.86</td>\n      <td>30.8</td>\n      <td>never smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5406</th>\n      <td>5406</td>\n      <td>2068</td>\n      <td>16113</td>\n      <td>Female</td>\n      <td>47.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>True</td>\n      <td>Govt_job</td>\n      <td>Rural</td>\n      <td>100.41</td>\n      <td>23.8</td>\n      <td>never smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5407</th>\n      <td>5407</td>\n      <td>2874</td>\n      <td>68970</td>\n      <td>Female</td>\n      <td>24.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>False</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>85.07</td>\n      <td>22.5</td>\n      <td>Unknown</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5408</th>\n      <td>5408</td>\n      <td>3736</td>\n      <td>70874</td>\n      <td>Male</td>\n      <td>71.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>True</td>\n      <td>Govt_job</td>\n      <td>Urban</td>\n      <td>153.08</td>\n      <td>21.5</td>\n      <td>Unknown</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5409</th>\n      <td>5409</td>\n      <td>1667</td>\n      <td>50841</td>\n      <td>Female</td>\n      <td>40.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>True</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>191.48</td>\n      <td>27.9</td>\n      <td>smokes</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5410 rows Ã— 14 columns</p>\n</div>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644729383
        },
        "id": "6cd31d36-7450-4221-9cd2-7da217208dc8"
      },
      "source": [
        "from azureml.core import Experiment\n",
        "exp = Experiment(workspace=ws, name=\"stroke_prediction\")\n",
        "run = exp.start_logging() "
      ],
      "id": "6cd31d36-7450-4221-9cd2-7da217208dc8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d0313bf1"
      },
      "source": [
        "## 2. Import and Prepare the data"
      ],
      "id": "d0313bf1"
    },
    {
      "cell_type": "code",
      "metadata": {
        "gather": {
          "logged": 1635644729981
        },
        "id": "8865ac08"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import sklearn\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.metrics import precision_recall_fscore_support\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")"
      ],
      "id": "8865ac08",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644730598
        },
        "id": "8828ef39-fc67-490e-8f01-239051172adf"
      },
      "source": [
        "dt = dataset.to_pandas_dataframe()\n",
        "dt = dt.dropna()\n",
        "dt = dt.drop(['id', 'index','Column1'], axis = 1)\n",
        "data = pd.get_dummies(dt, columns=['gender', 'ever_married','work_type', 'Residence_type','smoking_status'], drop_first=True, dtype=np.int64)"
      ],
      "id": "8828ef39-fc67-490e-8f01-239051172adf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644730755
        },
        "id": "d59e813a-e6a8-4655-a106-f64313445f6a",
        "outputId": "61fadf18-2b2a-4c19-b29a-c6c678731ac0"
      },
      "source": [
        "data.stroke.value_counts()"
      ],
      "id": "d59e813a-e6a8-4655-a106-f64313445f6a",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 6,
          "data": {
            "text/plain": "0    4984\n1     213\nName: stroke, dtype: int64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644730887
        },
        "id": "1c43484e-da96-4b12-ba63-7f3dfefc6bf6"
      },
      "source": [
        "y = data['stroke']\n",
        "X = data.drop(columns=['stroke'])\n",
        "oversample = SMOTE()\n",
        "X, y = oversample.fit_resample(X, y)"
      ],
      "id": "1c43484e-da96-4b12-ba63-7f3dfefc6bf6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644731028
        },
        "id": "fb2e8dd0-6894-4bff-ad21-ff81fcef5010",
        "outputId": "ac4af1a4-5de3-4f74-d41b-3d91b42eb12f"
      },
      "source": [
        "y.value_counts()"
      ],
      "id": "fb2e8dd0-6894-4bff-ad21-ff81fcef5010",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 8,
          "data": {
            "text/plain": "1    4984\n0    4984\nName: stroke, dtype: int64"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "id": "e7175ef2-7e78-477b-b934-25cbd47efd76"
      },
      "source": [
        "## 3. Models\n"
      ],
      "id": "e7175ef2-7e78-477b-b934-25cbd47efd76"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fooKfSJwFrF1"
      },
      "source": [
        "### 3.1 Logisitc Regression"
      ],
      "id": "fooKfSJwFrF1"
    },
    {
      "cell_type": "code",
      "metadata": {
        "gather": {
          "logged": 1635644731156
        },
        "id": "d30622d0"
      },
      "source": [
        "#split data \n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=8)"
      ],
      "id": "d30622d0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "gather": {
          "logged": 1635644731286
        },
        "id": "4f02177c"
      },
      "source": [
        "log_model = LogisticRegression()\n",
        "solvers = ['newton-cg', 'lbfgs', 'liblinear']\n",
        "penalty = ['l1', 'l2']\n",
        "c_values = np.logspace(0, 5, num=10)\n",
        "grid = dict(solver=solvers,penalty=penalty,C=c_values)"
      ],
      "id": "4f02177c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "gather": {
          "logged": 1635644735724
        },
        "id": "c58b137c",
        "outputId": "a59686f0-fbc3-4a30-87cb-203f3d19bcdf"
      },
      "source": [
        "randomizedsearch = RandomizedSearchCV(log_model, grid)\n",
        "best_log = randomizedsearch.fit(X_train, y_train)\n",
        "best_log_model = best_log.best_estimator_\n",
        "print(\"The Best Logistics Model is as following: \\n\", best_log_model)"
      ],
      "id": "c58b137c",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "The Best Logistics Model is as following: \n LogisticRegression(C=7742.636826811277)\n"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "gather": {
          "logged": 1635644735852
        },
        "id": "40d510a3"
      },
      "source": [
        "def model_metrics(X_test, y_test, model):\n",
        "    y_pred = model.predict(X_test)\n",
        "    accuracy_score = model.score(X_test, y_test)\n",
        "    f1_score = metrics.f1_score(y_test, y_pred)\n",
        "    roc_auc_score = metrics.roc_auc_score(y_test, y_pred)\n",
        "    return accuracy_score, f1_score, roc_auc_score"
      ],
      "id": "40d510a3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "gather": {
          "logged": 1635644735979
        },
        "id": "5557ae0a"
      },
      "source": [
        "def roc_curve(X, y, model):\n",
        "    import matplotlib.pyplot as plt\n",
        "\n",
        "    prob = model.predict_proba(X)\n",
        "    pred = prob[:,1]\n",
        "    fpr, tpr, threshold = metrics.roc_curve(y, pred)\n",
        "    roc_auc = metrics.auc(fpr, tpr)\n",
        "\n",
        "    plt.title('ROC Curve')\n",
        "    plt.plot(fpr, tpr, 'b', label = 'AUC = %0.1f' % roc_auc)\n",
        "    plt.legend(loc = 'lower right')\n",
        "    plt.plot([-0.01, 1.01], [-0.01, 1.01],'r--')\n",
        "    plt.xlim([-0.01, 1.01])\n",
        "    plt.ylim([-0.01, 1.01])\n",
        "    plt.ylabel('True Positive Rate')\n",
        "    plt.xlabel('False Positive Rate')\n",
        "    "
      ],
      "id": "5557ae0a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "gather": {
          "logged": 1635644736114
        },
        "id": "d02d3f99"
      },
      "source": [
        "def classifcation_reports(X_test, X_train, y_test, y_train, model):\n",
        "    y_test_pred = model.predict(X_test)\n",
        "    y_train_pred = model.predict(X_train)\n",
        "    return('Classification report for train data is : \\n',metrics.classification_report(y_train, y_train_pred)),('Classification report for test data is : \\n',metrics.classification_report(y_test, y_test_pred))"
      ],
      "id": "d02d3f99",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644737134
        },
        "id": "1464f98d-d476-48bb-b685-82214d16d3c9"
      },
      "source": [
        "import seaborn as sns\n",
        "import numpy as np\n",
        "from sklearn.metrics import precision_recall_fscore_support\n",
        "import matplotlib.pyplot as plt"
      ],
      "id": "1464f98d-d476-48bb-b685-82214d16d3c9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644738804
        },
        "id": "0047ee5e-53fc-48a7-911d-e075b2bb825a"
      },
      "source": [
        "def plot_classification_report(X_test, y_test, model, figsize=(5, 5), ax=None):\n",
        "    y_pred =best_log_model.predict(X_test)\n",
        "    plt.figure(figsize=figsize)\n",
        "\n",
        "    xticks = ['precision', 'recall', 'f1-score', 'support']\n",
        "    yticks = list(np.unique(y_test))\n",
        "    yticks += ['avg']\n",
        "\n",
        "    rep = np.array(precision_recall_fscore_support(y_test, y_pred)).T\n",
        "    avg = np.mean(rep, axis=0)\n",
        "    avg[-1] = np.sum(rep[:, -1])\n",
        "    rep = np.insert(rep, rep.shape[0], avg, axis=0)\n",
        "\n",
        "    sns.heatmap(rep,\n",
        "                annot=True, \n",
        "                cbar=True, \n",
        "                cmap=\"YlGnBu\",\n",
        "                xticklabels=xticks, \n",
        "                yticklabels=yticks,\n",
        "                ax=ax,\n",
        "                linewidths=.5)\n",
        "    "
      ],
      "id": "0047ee5e-53fc-48a7-911d-e075b2bb825a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "gather": {
          "logged": 1635644740012
        },
        "id": "374cbe67"
      },
      "source": [
        "accuracy_score,f1_score, roc_curve_score = model_metrics(X_test, y_test,best_log_model)\n",
        "run.log(\"accuracy_log\", accuracy_score)\n",
        "run.log(\"f1_score_log\", f1_score)\n",
        "run.log(\"roc_curve_score_log\", roc_curve_score)"
      ],
      "id": "374cbe67",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "gather": {
          "logged": 1635644741444
        },
        "id": "7f00c30f",
        "outputId": "af810a8c-1ce3-48be-fb12-0f8017a34c66"
      },
      "source": [
        "best_log_roc = roc_curve(X_test,y_test,best_log_model)\n",
        "run.log_image(\"log_roc_curve\", plot=plt)"
      ],
      "id": "7f00c30f",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644743505
        },
        "id": "38210baf-5f2f-4939-95a2-21d317184c3d",
        "outputId": "948e6278-a67b-4f24-8cac-e02493bbc85e"
      },
      "source": [
        "classfication_report = plot_classification_report(X_test, y_test,best_log_model)\n",
        "run.log_image(\"classifcation report\", plot=plt)"
      ],
      "id": "38210baf-5f2f-4939-95a2-21d317184c3d",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 360x360 with 2 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644744361
        },
        "id": "800b20c8-ccf2-4812-9a3f-c5dcc0da5154",
        "outputId": "a124e6c5-7338-4aff-dadf-e714c7b8f2d0"
      },
      "source": [
        "import joblib\n",
        "model_name = \"best_log_model.pkl\"\n",
        "filename = \"outputs/\" + model_name\n",
        "joblib.dump(value=best_log_model, filename=filename)\n",
        "run.upload_file(name=model_name, path_or_stream=filename)\n",
        "#run.complete()"
      ],
      "id": "800b20c8-ccf2-4812-9a3f-c5dcc0da5154",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 20,
          "data": {
            "text/plain": "<azureml._restclient.models.batch_artifact_content_information_dto.BatchArtifactContentInformationDto at 0x7fbd55ef0f28>"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0747a445"
      },
      "source": [
        ""
      ],
      "id": "0747a445",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "id": "f4665b51-cd41-4d21-8e38-3ff5a01b4cac"
      },
      "source": [
        "### 3.2 Random Forest"
      ],
      "id": "f4665b51-cd41-4d21-8e38-3ff5a01b4cac"
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644745814
        },
        "id": "e412e8ed-8fdc-4269-b255-ab53852e4d6f"
      },
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import RandomizedSearchCV"
      ],
      "id": "e412e8ed-8fdc-4269-b255-ab53852e4d6f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644746689
        },
        "id": "31cf4297-681d-4414-90d7-f496892f5eb0"
      },
      "source": [
        "# Number of trees in random forest\n",
        "n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n",
        "\n",
        "# Number of features to consider at every split\n",
        "max_features = ['auto', 'sqrt']\n",
        "\n",
        "# Maximum number of levels in tree\n",
        "max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\n",
        "max_depth.append(None)\n",
        "\n",
        "# Minimum number of samples required to split a node\n",
        "min_samples_split = [2, 5, 10]\n",
        "\n",
        "# Minimum number of samples required at each leaf node\n",
        "min_samples_leaf = [1, 2, 4]\n",
        "\n",
        "# Method of selecting samples for training each tree\n",
        "bootstrap = [True, False]\n",
        "\n",
        "# Create the random grid\n",
        "random_grid = {'n_estimators': n_estimators,\n",
        "               'max_features': max_features,\n",
        "               'max_depth': max_depth,\n",
        "               'min_samples_split': min_samples_split,\n",
        "               'min_samples_leaf': min_samples_leaf,\n",
        "               'bootstrap': bootstrap}"
      ],
      "id": "31cf4297-681d-4414-90d7-f496892f5eb0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644994786
        },
        "id": "6464167c-97ea-40d7-a941-6b05d3658e95",
        "outputId": "aadbc3f2-fcaa-4ddf-b9a2-0652039a04c9"
      },
      "source": [
        "# Use the random grid to search for best hyperparameters\n",
        "# First create the base model to tune\n",
        "rf = RandomForestClassifier()\n",
        "# Random search of parameters, using 3 fold cross validation, \n",
        "# search across 100 different combinations, and use all available cores\n",
        "rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 50, cv = 3, verbose=2, random_state=8, n_jobs = -1)\n",
        "# Fit the random search model\n",
        "best_rf = rf_random.fit(X_train, y_train)\n",
        "best_rf_model = best_rf.best_estimator_\n",
        "print(\"The Best Random Forest Model is as following: \\n\", best_rf.best_estimator_)"
      ],
      "id": "6464167c-97ea-40d7-a941-6b05d3658e95",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": "Fitting 3 folds for each of 50 candidates, totalling 150 fits\nThe Best Random Forest Model is as following: \n RandomForestClassifier(bootstrap=False, max_depth=100, min_samples_split=5,\n                       n_estimators=1400)\n"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644995630
        },
        "id": "0f295089-b41b-4beb-8b5a-a948f926f02b"
      },
      "source": [
        "accuracy_score,f1_score, roc_curve_score = model_metrics(X_test, y_test,best_rf_model)\n",
        "run.log(\"accuracy_log\", accuracy_score)\n",
        "run.log(\"f1_score_log\", f1_score)\n",
        "run.log(\"roc_curve_score_log\", roc_curve_score)"
      ],
      "id": "0f295089-b41b-4beb-8b5a-a948f926f02b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644996714
        },
        "id": "9f13b35f-a528-4a10-8028-5dbface54c4e",
        "outputId": "1b389e7b-95ac-4e35-e5c6-ca65d743a52a"
      },
      "source": [
        "best_log_roc = roc_curve(X_test,y_test,best_rf_model)\n",
        "run.log_image(\"rf_roc_curve\", plot=plt)"
      ],
      "id": "9f13b35f-a528-4a10-8028-5dbface54c4e",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 432x288 with 1 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635644997300
        },
        "id": "7a96f3e9-1a89-4ef0-9061-e2aac17dc521",
        "outputId": "7a5bf8d6-056d-47e9-e26b-8732dfcfff40"
      },
      "source": [
        "classfication_report = plot_classification_report(X_test, y_test,best_rf_model)\n",
        "run.log_image(\"classifcation report\", plot=plt)"
      ],
      "id": "7a96f3e9-1a89-4ef0-9061-e2aac17dc521",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": "<Figure size 360x360 with 2 Axes>",
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "jupyter": {
          "source_hidden": false,
          "outputs_hidden": false
        },
        "nteract": {
          "transient": {
            "deleting": false
          }
        },
        "gather": {
          "logged": 1635645002678
        },
        "id": "3b272695-d91c-4f2d-9388-33ba1a189c4d"
      },
      "source": [
        "import joblib\n",
        "model_name2 = \"best_rf_model.pkl\"\n",
        "filename2 = \"outputs/\" + model_name2\n",
        "joblib.dump(value=best_rf_model, filename=filename2)\n",
        "run.upload_file(name=model_name2, path_or_stream=filename2)\n",
        "run.complete()"
      ],
      "id": "3b272695-d91c-4f2d-9388-33ba1a189c4d",
      "execution_count": null,
      "outputs": []
    }
  ]
}
